{"version":3,"sources":["components/ContactList/ContactList.module.css","components/ContactForm/ContactForm.module.css","redux/contacts-actions.js","redux/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/App/App.js","index.js"],"names":["module","exports","addContact","createAction","name","number","payload","id","shortid","generate","deleteContact","changeFilter","items","createReducer","initialContact","actions","state","action","filter","con","_","combineReducers","contactsPersistConfig","key","storage","blacklist","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","persistReducer","contactsReducer","devTools","process","persistor","persistStore","connect","value","dispatch","formSubmitHandler","actionsContact","props","useState","setName","setNumber","handleChange","event","currentTarget","reset","onSubmit","e","preventDefault","checkName","toLowerCase","some","item","alert","className","s","form","type","pattern","title","required","onChange","btnForm","getVisibleContact","allContacts","normalizedFilter","includes","visibleContact","onDeleteCont","list","map","onClick","App","ContactForm","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"kIACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,KAAO,0BAA0B,QAAU,+B,mBCA9FD,EAAOC,QAAU,CAAC,KAAO,0BAA0B,QAAU,+B,ifCiB9C,GAAEC,WAdEC,YAAa,gBAAgB,YAAoC,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,OACvE,MAAO,CACLC,QAAS,CACPC,GAAIC,IAAQC,WACZL,OACAC,cASuBK,cAJPP,YAAa,mBAISQ,aAFvBR,YAAa,oB,QCR5BS,EAAQC,YAAc,YAAIC,IAAL,mBACxBC,EAAQb,YAAa,SAACc,EAAOC,GAAR,4BAAuBD,GAAvB,CAA8BC,EAAOX,aADlC,cAExBS,EAAQL,eAAgB,SAACM,EAAOC,GAAR,OAAmBD,EAAME,QAAO,SAAAC,GAAG,OAAIA,EAAIZ,KAAOU,EAAOX,cAFzD,IAKrBY,EAASL,YAAc,GAAD,eACzBE,EAAQJ,cAAe,SAACS,EAAD,YAAMd,YAGjBe,cAAgB,CAC7BT,QACAM,WCHII,EAAwB,CAC5BC,IAAK,WACLC,YACAC,UAAW,CAAC,WAGRC,EAAU,sBACXC,YAAqB,CACtBC,kBAAmB,CACjBC,eAAgB,CAACC,IAAOC,IAAWC,IAAOC,IAASC,IAAOC,SAHhD,CAMdC,MAOIC,EAAQC,YAAe,CAC3BC,QAAS,CACPC,SAAUC,YAAenB,EAAuBoB,IAElDhB,aACAiB,UAAUC,IAiBG,GAAEP,QAAOQ,UAFRC,YAAaT,I,8CCqB7B,IAceU,eAdS,SAAA/B,GAEtB,MAAO,CACLgC,MAAOhC,EAAMwB,aAKU,SAAAS,GACzB,MAAO,CACLC,kBAAmB,SAACF,GAAD,OAAWC,EAASE,EAAejD,WAAW8C,QAItDD,EArFf,SAAcK,GAEZ,MAAwBC,mBAAS,IAAjC,mBAAOjD,EAAP,KAAakD,EAAb,KACA,EAA4BD,mBAAS,IAArC,mBAAOhD,EAAP,KAAekD,EAAf,KAGKC,EAAe,SAAAC,GAClB,MAAwBA,EAAMC,cAAtBtD,EAAR,EAAQA,KAAM4C,EAAd,EAAcA,MACD,SAAT5C,EAIS,WAATA,GACFmD,EAAUP,GAJVM,EAAQN,IA0BNW,EAAQ,WACZL,EAAQ,IACRC,EAAU,KAGV,OACS,uBAAMK,SArBI,SAAAC,GACnBA,EAAEC,iBAEE,IAAMC,EAAY3D,EAAK4D,cACrBZ,EAAMJ,MAAMpC,MAAMqD,MAAK,SAAAC,GAAI,OAAIA,EAAK9D,KAAK4D,gBAAV,UAA+BD,MAChEI,MAAM,GAAD,OAAI/D,EAAJ,6BAMTgD,EAAMF,kBAAkB,CAAE9C,OAAMC,WAChCsD,MASuCS,UAAWC,IAAEC,KAA3C,iBAGH,uBACEC,KAAK,OACLnE,KAAK,OACLoE,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACR1B,MAAO5C,EACPuE,SAAUnB,IAVT,SAeH,uBACEe,KAAK,MACLnE,KAAK,SACLoE,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,EACR1B,MAAO3C,EACPsE,SAAUnB,IAGZ,wBAAQe,KAAK,SAASH,UAAWC,IAAEO,QAAnC,+BCnDK7B,eARS,SAAA/B,GAAK,MAAK,CAC9BgC,MAAOhC,EAAMwB,SAAStB,WAGC,SAAA+B,GAAQ,MAAK,CACpC0B,SAAU,SAACd,GAAD,OAAKZ,EAASE,EAAexC,aAAakD,EAAEH,cAAcV,YAGzDD,EAhBA,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAO2B,EAAV,EAAUA,SAAV,OACb,0DAEE,uBACA,uBAAOJ,KAAK,OAAOvB,MAAOA,EAAO2B,SAAUA,U,iBCUzCE,EAAoB,SAACC,EAAa5D,GACtC,IAAM6D,EAAmB7D,EAAO8C,cAEhC,OAAOc,EAAY5D,QAAO,SAAAC,GAAG,OAAIA,EAAIf,KAAK4D,cAAcgB,SAASD,OAWpDhC,eARS,SAAC,GAAD,QAAGP,SAAY5B,EAAf,EAAeA,MAAOM,EAAtB,EAAsBA,OAAtB,MAAsC,CAC5D+D,eAAgBJ,EAAkBjE,EAAOM,OAGhB,SAAA+B,GAAQ,MAAK,CACtCiC,aAAc,SAAA3E,GAAE,OAAI0C,EAASE,EAAezC,cAAcH,QAG7CwC,EA3BK,SAAC,GAAD,IAAGkC,EAAH,EAAGA,eAAgBC,EAAnB,EAAmBA,aAAnB,OAClB,oBAAId,UAAWC,IAAEc,KAAjB,SACGF,EAAeG,KAAI,gBAAG7E,EAAH,EAAGA,GAAIH,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OAClB,qBAAa+D,UAAWC,IAAEH,KAA1B,UACG9D,EADH,IACS,+BAAOC,IACd,wBAAQkE,KAAK,SAASc,QAAS,kBAAMH,EAAa3E,IAAK6D,UAAWC,IAAEO,QAApE,sBAFOrE,WCgBA+E,MAhBf,WACE,OACE,sBAAKlB,UAAU,YAAf,UACE,2CAEA,cAACmB,EAAD,IAEA,0CAEA,cAAC,EAAD,IAEA,cAAC,EAAD,QCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUrD,MAAOA,EAAMA,MAAvB,SACE,cAAC,IAAD,CAAasD,QAAS,KAAM9C,UAAWR,EAAMQ,UAA7C,SACE,cAAC,EAAD,UAIN+C,SAASC,eAAe,W","file":"static/js/main.0bb1d5a6.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3DP4l\",\"item\":\"ContactList_item__26220\",\"btnForm\":\"ContactList_btnForm__gvvb8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2dbli\",\"btnForm\":\"ContactForm_btnForm__G1NC-\"};","/* eslint-disable import/no-anonymous-default-export */\r\nimport { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n\r\nconst addContact = createAction('contacts.add', function prepare({ name, number }) {\r\n  return {\r\n    payload: {\r\n      id: shortid.generate(),\r\n      name,\r\n      number,\r\n    },\r\n  };\r\n});\r\n\r\nconst deleteContact = createAction('contacts.delete');\r\n\r\nconst changeFilter = createAction('contacts.filter');\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n\r\n// was- before toolkit\r\n/* eslint-disable import/no-anonymous-default-export */\r\n// import shortid from 'shortid';\r\n// import types from './contacts-types';\r\n\r\n// const addContact = ({ name, number }) => ({\r\n//   type: types.ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name,\r\n//     number,\r\n//   },\r\n// });\r\n\r\n// const deleteContact = id => ({\r\n//   type: types.DELETE,\r\n//   payload: id,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: types.FILTER,\r\n//   payload: value,\r\n// });\r\n\r\n// export default { addContact, deleteContact, changeFilter };\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n// import types from './contacts-types';\r\nimport actions from './contacts-actions';\r\nimport initialContact from '../data/start-data.json';\r\n\r\n// console.log('actions.deleteContact.type', actions.deleteContact.type);\r\n\r\nconst items = createReducer([...initialContact], {\r\n  [actions.addContact]: (state, action) => [...state, action.payload],\r\n  [actions.deleteContact]: (state, action) => state.filter(con => con.id !== action.payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [actions.changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// //was\r\n// const items = (state = [...initialContact], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(con => con.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (filter = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return filter;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage'; // defaults to localStorage for web\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'Contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: persistReducer(persistConfig, contactsReducer),\r\n// });\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\n// const store = configureStore({\r\n//   reducer: persistedReducer,\r\n//   middleware,\r\n//   devTools: process.env.NODE_ENV === 'development',\r\n// });\r\n\r\nlet persistor = persistStore(store); //обертка над СТОРЕМ в кот обновляет Локал Стор\r\n\r\nexport default { store, persistor };\r\n\r\n// // BLACKLIST\r\n// const persistConfig = {\r\n//   key: 'root',\r\n//   storage: storage,\r\n//   blacklist: ['navigation'] // navigation will not be persisted\r\n// };\r\n\r\n// // WHITELIST\r\n// const persistConfig = {\r\n//   key: 'root',\r\n//   storage: storage,\r\n//   whitelist: ['navigation'] // only navigation will be persisted\r\n// };\r\n\r\n//Persis\r\n// const contacts = {\r\n//     items: [],\r\n//     filter: '',\r\n// };\r\n\r\n//without LS\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducer from './contacts-reducer';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n\r\n//with LS\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducer from './contacts-reducer';\r\n// const saveToLocalStorag = state => {\r\n//   try {\r\n//     localStorage.setItem('state', JSON.stringify(state));\r\n//   } catch (e) {\r\n//     console.error(e);\r\n//   }\r\n// };\r\n\r\n// const loadFromLocalStorage = () => {\r\n//   try {\r\n//     const stateStr = localStorage.getItem('state');\r\n//     return stateStr ? JSON.parse(stateStr) : undefined;\r\n//   } catch (e) {\r\n//     console.error(e);\r\n//     return undefined;\r\n//   }\r\n// };\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const persistedStore = loadFromLocalStorage();\r\n\r\n// //contactsReducer.items - массив контактов\r\n\r\n// const store = createStore(rootReducer, persistedStore, composeWithDevTools());\r\n\r\n// store.subscribe(() => {\r\n//   saveToLocalStorag(store.getState());\r\n// });\r\n// export default store;\r\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../redux/contacts-actions';\nimport s from './ContactForm.module.css'\n  \nfunction Form(props) {\n  //Этот стейт оставляю\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('')\n    \n    \n const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') {\n      setName(value);\n      return\n    }\n    if (name === 'number') {\n      setNumber(value)\n    }   \n };\n  \n  // console.log('props.value.items',props.value.items);\n  // console.log('props', props);\n  \n  const handleSubmit = e => {\n    e.preventDefault();\n  //\n        const checkName = name.toLowerCase();\n      if (props.value.items.some(item => item.name.toLowerCase() === `${checkName}`)) {\n        alert(`${name} is already in contacts`);\n        //  reset();\n        return;\n      }\n\n    // сразу отправляется в Глоб. Стейт-Redax state\n    props.formSubmitHandler({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('')\n  };\n    \n    return (\n             <form onSubmit={handleSubmit} className={s.form}>\n          Name\n          \n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n         \n          Number\n         \n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n          \n          <button type=\"submit\" className={s.btnForm}>Add contact</button>\n        </form>\n        )\n}\n\nconst mapStateToProps = state => {\n  // console.log('state',state);\n  return {\n    value: state.contacts,\n  }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    formSubmitHandler: (value) => dispatch(actionsContact.addContact(value)),\n  }\n  };\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Form);\n\n// class Form extends Component {\n//     state = {\n//      name: '',\n//     number: '',\n//     }\n    \n//  handleChange = event => {\n//     const { name, value } = event.currentTarget;\n//     // console.log(event.currentTarget);\n//     // используем вычисляемые св-ва\n//     this.setState({\n//       [name]: value,\n//     });\n//     };\n    \n//       handleSubmit = e => {\n//     e.preventDefault();\n//     // const { name, number } = this.state;\n//     // console.log(`\n//     //   name: ${name}\n//     //   number: ${number}\n//     // `);\n//     this.props.formSubmitHandler({ ...this.state });\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n    \n//     render() {\n//         return (\n//              <form onSubmit={this.handleSubmit} className={s.form}>\n//           Name\n          \n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={this.state.name}\n//             onChange={this.handleChange}\n//           />\n         \n//           Number\n         \n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             value={this.state.number}\n//             onChange={this.handleChange}\n//           />\n          \n//           <button type=\"submit\" className={s.btnForm}>Add contact</button>\n//         </form>\n//         )\n//     }\n// }","import React from 'react';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../redux/contacts-actions';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <br />\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nconst mapStateToProps = state => ({\n    value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (e)=>dispatch(actionsContact.changeFilter(e.currentTarget.value))\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);","import React from 'react';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../redux/contacts-actions';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ visibleContact, onDeleteCont }) => (\n  <ul className={s.list}>\n    {visibleContact.map(({ id, name, number }) => (\n      <li key={id} className={s.item}>\n        {name}:<span>{number}</span>\n        <button type=\"button\" onClick={() => onDeleteCont(id)} className={s.btnForm}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n//вспомогательная функция - селектор\nconst getVisibleContact = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(con => con.name.toLowerCase().includes(normalizedFilter));\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  visibleContact: getVisibleContact(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteCont: id => dispatch(actionsContact.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n\n/* was: this.state.contact */\n\n// const visibleContact = () => {\n//   const normalizedFilter = filter.toLowerCase();\n//   const visibleContact = contacts.filter(con =>\n//     con.name.toLowerCase().includes(normalizedFilter),\n//   );\n//   return visibleContact;\n// };\n\n// const mapStateToProps = state => {\n//     const { items, filter } = state.contacts;\n//     const normalizedFilter = filter.toLowerCase();\n//     const visibleContact = items.filter(con =>\n//       con.name.toLowerCase().includes(normalizedFilter),\n//     );\n//     return {\n//         visibleContact: visibleContact,\n//     }\n// };\n","import '../App/App.css';\nimport React from 'react';\n// import { connect } from 'react-redux';\n\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n// Вся информация забирается с локал стоража\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      {/* <ContactForm formSubmitHandler={formSubmitHandler} /> */}\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      {/* <Filter value={filter} onChange={changeFilter} /> */}\n      <Filter />\n      {/* <ContactList visibleContact={visibleContact()} onDeleteCont={onDeleteCont} /> */}\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.contacts.items,\n//   }\n// }\n// export default connect(mapStateToProps)(App);\n\n// class App extends Component {\n//   state = {\n//     contacts: initialContact,\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsetContacts = JSON.parse(contacts);\n\n//     if (parsetContacts) {\n//       this.setState({\n//         contacts: [...parsetContacts],\n//       });\n//     }\n//   }\n\n//   componentDidUpdate(prevState) {\n//     // console.log('prevState.contacts', prevState.contacts);\n//     // console.log('this.state.contacts', this.state.contacts);\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   formSubmitHandler = ({ name, number }) => {\n//     const cont = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const checkName = cont.name.toLowerCase();\n//     if (this.state.contacts.some(item => item.name.toLowerCase() === `${checkName}`)) {\n//       alert(`${cont.name} is already in contacts`);\n//       return;\n//     }\n//     this.setState(prevState => {\n//       const contacts = [...prevState.contacts, cont];\n//       return {\n//         contacts,\n//       };\n//     });\n//     // console.log('Arr', this.state.contacts);\n//   };\n\n//   changeFilter = e => {\n//     // console.log(e.currentTarget.value);\n//     this.setState({\n//       filter: e.currentTarget.value,\n//     });\n//   };\n\n//   onDeleteCont = id => {\n//     // console.log(id);\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(con => con.id !== id),\n//     }));\n//   };\n//   // filter создаёт НОВЫЙ массив, в который войдут только те элементы arr, для которых вызов callback(item, i, arr) возвратит true.\n\n//   visibleContact = () => {\n//     const normalizedFilter = this.state.filter.toLowerCase();\n//     const visibleContact = this.state.contacts.filter(con =>\n//       con.name.toLowerCase().includes(normalizedFilter),\n//     );\n//     return visibleContact;\n//   };\n\n//   render() {\n//     // const normalizedFilter = this.state.filter.toLowerCase();\n//     // const visibleContact = this.state.contacts.filter(con =>\n//     //   con.name.toLowerCase().includes(normalizedFilter),\n//     // );\n//     return (\n//       <div className=\"container\">\n//         <h1>Phonebook</h1>\n\n//         <ContactForm formSubmitHandler={this.formSubmitHandler} />\n\n//         <h2>Contacts</h2>\n//         <Filter value={this.state.filter} onChange={this.changeFilter} />\n\n//         <ContactList visibleContact={this.visibleContact()} onDeleteCont={this.onDeleteCont} />\n//       </div>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport store from './redux/store.js';\n\nimport './index.css';\nimport App from './components/App/App.js';\n// console.log(store);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// если персистер - то Апп обернуть в персистГейт\n"],"sourceRoot":""}