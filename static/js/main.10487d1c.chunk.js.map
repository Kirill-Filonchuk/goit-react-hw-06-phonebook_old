{"version":3,"sources":["components/ContactForm/ContactForm.module.css","redux/contacts-types.js","redux/contacts-reducer.js","redux/store.js","redux/contacts-actions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/App/App.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","combineReducers","items","state","initialContact","type","payload","types","filter","con","id","rootReducer","contacts","contactsReducer","persistedStore","stateStr","localStorage","getItem","JSON","parse","undefined","e","console","error","loadFromLocalStorage","store","createStore","composeWithDevTools","subscribe","setItem","stringify","saveToLocalStorag","getState","name","number","shortid","generate","value","connect","log","dispatch","formSubmitHandler","actionsContact","HaHa","props","useState","setName","setNumber","handleChange","event","currentTarget","reset","onSubmit","preventDefault","checkName","toLowerCase","some","item","alert","className","s","form","pattern","title","required","onChange","btnForm","getVisibleContact","allContacts","normalizedFilter","includes","visibleContact","onDeleteCont","list","map","onClick","App","ContactForm","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.10487d1c.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2dbli\",\"btnForm\":\"ContactForm_btnForm__G1NC-\"};","// const ADD = 'contacts/Add';\r\n// const DELETE = 'contacts/Delete';\r\n// const FILTER = 'contacts/FilterContacts';\r\n\r\n// export default { ADD, DELETE, FILTER };\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default {\r\n  ADD: 'contacts/Add',\r\n  DELETE: 'contacts/Delete',\r\n  FILTER: 'contacts/FilterContacts',\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport types from './contacts-types';\r\nimport initialContact from '../data/start-data.json';\r\n\r\nconst items = (state = [...initialContact], { type, payload }) => {\r\n  switch (type) {\r\n    case types.ADD:\r\n      return [...state, payload];\r\n\r\n    case types.DELETE:\r\n      return state.filter(con => con.id !== payload);\r\n\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst filter = (filter = '', { type, payload }) => {\r\n  switch (type) {\r\n    case types.FILTER:\r\n      return payload;\r\n\r\n    default:\r\n      return filter;\r\n  }\r\n};\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// //was\r\n// const items = (state = [...initialContact], { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.ADD:\r\n//       return [...state, payload];\r\n\r\n//     case types.DELETE:\r\n//       return state.filter(con => con.id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (filter = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case types.FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return filter;\r\n//   }\r\n// };\r\n\r\n// export default combineReducers({\r\n//   items,\r\n//   filter,\r\n// });\r\n","import { createStore, combineReducers } from 'redux';\r\n\r\n// import { persistStore, persistReducer } from 'redux-persist';\r\n// import storage from 'redux-persist/lib/storage'; // установлен по умолчанию в localStorage для веба\r\n\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport contactsReducer from './contacts-reducer';\r\n\r\n// const persistConfig = {\r\n//   key: 'root',\r\n//   storage,\r\n// };\r\n\r\nconst saveToLocalStorag = state => {\r\n  try {\r\n    localStorage.setItem('state', JSON.stringify(state));\r\n  } catch (e) {\r\n    console.error(e);\r\n  }\r\n};\r\n\r\nconst loadFromLocalStorage = () => {\r\n  try {\r\n    const stateStr = localStorage.getItem('state');\r\n    return stateStr ? JSON.parse(stateStr) : undefined;\r\n  } catch (e) {\r\n    console.error(e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst rootReducer = combineReducers({\r\n  contacts: contactsReducer,\r\n});\r\n\r\nconst persistedStore = loadFromLocalStorage();\r\n\r\n//contactsReducer.items - массив контактов\r\n// const persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nconst store = createStore(rootReducer, persistedStore, composeWithDevTools());\r\n\r\nstore.subscribe(() => {\r\n  saveToLocalStorag(store.getState());\r\n});\r\n\r\n// eslint-disable-next-line import/no-anonymous-default-export\r\nexport default store;\r\n//Persis\r\n// const contacts = {\r\n//     items: [],\r\n//     filter: '',\r\n// };\r\n\r\n//without LS\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducer from './contacts-reducer';\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n\r\n// export default store;\r\n\r\n//with LS\r\n\r\n// import { createStore, combineReducers } from 'redux';\r\n\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\n// import contactsReducer from './contacts-reducer';\r\n// const saveToLocalStorag = state => {\r\n//   try {\r\n//     localStorage.setItem('state', JSON.stringify(state));\r\n//   } catch (e) {\r\n//     console.error(e);\r\n//   }\r\n// };\r\n\r\n// const loadFromLocalStorage = () => {\r\n//   try {\r\n//     const stateStr = localStorage.getItem('state');\r\n//     return stateStr ? JSON.parse(stateStr) : undefined;\r\n//   } catch (e) {\r\n//     console.error(e);\r\n//     return undefined;\r\n//   }\r\n// };\r\n\r\n// const rootReducer = combineReducers({\r\n//   contacts: contactsReducer,\r\n// });\r\n\r\n// const persistedStore = loadFromLocalStorage();\r\n\r\n// //contactsReducer.items - массив контактов\r\n\r\n// const store = createStore(rootReducer, persistedStore, composeWithDevTools());\r\n\r\n// store.subscribe(() => {\r\n//   saveToLocalStorag(store.getState());\r\n// });\r\n// export default store;\r\n","/* eslint-disable import/no-anonymous-default-export */\r\nimport shortid from 'shortid';\r\nimport types from './contacts-types';\r\n\r\nconst addContact = ({ name, number }) => ({\r\n  type: types.ADD,\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name,\r\n    number,\r\n  },\r\n});\r\n\r\nconst deleteContact = id => ({\r\n  type: types.DELETE,\r\n  payload: id,\r\n});\r\n\r\nconst changeFilter = value => ({\r\n  type: types.FILTER,\r\n  payload: value,\r\n});\r\n\r\nexport default { addContact, deleteContact, changeFilter };\r\n","import React, { useState } from 'react';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../redux/contacts-actions';\nimport s from './ContactForm.module.css'\n  \nfunction Form(props) {\n  //Этот стейт оставляю\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('')\n    \n    \n const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    if (name === 'name') {\n      setName(value);\n      return\n    }\n    if (name === 'number') {\n      setNumber(value)\n    }   \n };\n  \n  console.log('props.value.items',props.value.items);\n  console.log('props', props);\n  \n  const handleSubmit = e => {\n    e.preventDefault();\n  //\n        const checkName = name.toLowerCase();\n      if (props.value.items.some(item => item.name.toLowerCase() === `${checkName}`)) {\n        alert(`${name} is already in contacts`);\n        //  reset();\n        return;\n      }\n\n    // сразу отправляется в Глоб. Стейт-Redax state\n    props.formSubmitHandler({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('')\n  };\n    \n    return (\n             <form onSubmit={handleSubmit} className={s.form}>\n          Name\n          \n          <input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n            required\n            value={name}\n            onChange={handleChange}\n          />\n         \n          Number\n         \n          <input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n            required\n            value={number}\n            onChange={handleChange}\n          />\n          \n          <button type=\"submit\" className={s.btnForm}>Add contact</button>\n        </form>\n        )\n}\n\nconst mapStateToProps = state => {\n  console.log('state',state);\n  return {\n    value: state.contacts,\n  }\n};\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    formSubmitHandler: (value) => dispatch(actionsContact.addContact(value)),\n    HaHa: ()=> dispatch()\n  }\n  };\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Form);\n\n// class Form extends Component {\n//     state = {\n//      name: '',\n//     number: '',\n//     }\n    \n//  handleChange = event => {\n//     const { name, value } = event.currentTarget;\n//     // console.log(event.currentTarget);\n//     // используем вычисляемые св-ва\n//     this.setState({\n//       [name]: value,\n//     });\n//     };\n    \n//       handleSubmit = e => {\n//     e.preventDefault();\n//     // const { name, number } = this.state;\n//     // console.log(`\n//     //   name: ${name}\n//     //   number: ${number}\n//     // `);\n//     this.props.formSubmitHandler({ ...this.state });\n//     this.reset();\n//   };\n\n//   reset = () => {\n//     this.setState({ name: '', number: '' });\n//   };\n    \n//     render() {\n//         return (\n//              <form onSubmit={this.handleSubmit} className={s.form}>\n//           Name\n          \n//           <input\n//             type=\"text\"\n//             name=\"name\"\n//             pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//             title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//             required\n//             value={this.state.name}\n//             onChange={this.handleChange}\n//           />\n         \n//           Number\n         \n//           <input\n//             type=\"tel\"\n//             name=\"number\"\n//             pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//             title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//             required\n//             value={this.state.number}\n//             onChange={this.handleChange}\n//           />\n          \n//           <button type=\"submit\" className={s.btnForm}>Add contact</button>\n//         </form>\n//         )\n//     }\n// }","import React from 'react';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../redux/contacts-actions';\n\nconst Filter = ({ value, onChange }) => (\n  <label>\n    Find contacts by name\n    <br />\n    <input type=\"text\" value={value} onChange={onChange} />\n  </label>\n);\n\nconst mapStateToProps = state => ({\n    value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n    onChange: (e)=>dispatch(actionsContact.changeFilter(e.currentTarget.value))\n});\n\nexport default connect(mapStateToProps,mapDispatchToProps)(Filter);","import React from 'react';\nimport { connect } from 'react-redux';\nimport actionsContact from '../../redux/contacts-actions';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ visibleContact, onDeleteCont }) => (\n  <ul className={s.list}>\n    {visibleContact.map(({ id, name, number }) => (\n      <li key={id} className={s.item}>\n        {name}:<span>{number}</span>\n        <button type=\"button\" onClick={() => onDeleteCont(id)} className={s.btnForm}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n//вспомогательная функция - селектор\nconst getVisibleContact = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(con => con.name.toLowerCase().includes(normalizedFilter));\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  visibleContact: getVisibleContact(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onDeleteCont: id => dispatch(actionsContact.deleteContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n/* was: this.state.contact */\n\n// const visibleContact = () => {\n//   const normalizedFilter = filter.toLowerCase();\n//   const visibleContact = contacts.filter(con =>\n//     con.name.toLowerCase().includes(normalizedFilter),\n//   );\n//   return visibleContact;\n// };\n\n// const mapStateToProps = state => {\n//     const { items, filter } = state.contacts;\n//     const normalizedFilter = filter.toLowerCase();\n//     const visibleContact = items.filter(con =>\n//       con.name.toLowerCase().includes(normalizedFilter),\n//     );\n//     return {\n//         visibleContact: visibleContact,\n//     }\n// };\n","import '../App/App.css';\nimport React from 'react';\n// import { connect } from 'react-redux';\n\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n// Вся информация забирается с локал стоража\nfunction App() {\n  // const [contacts, setContacts] = useState(initialContact);\n  // const [filter, setFilter] = useState('');\n\n  // useEffect(() => {\n  //   const contacts = localStorage.getItem('contacts');\n  //   const parsetContacts = JSON.parse(contacts);\n\n  //   if (parsetContacts) {\n  //     setContacts([...parsetContacts]);\n  //   }\n  // }, []);\n\n  // useEffect(() => {\n  //   localStorage.setItem('contacts', JSON.stringify(contacts));\n  // }, [contacts]);\n\n  // const formSubmitHandler = ({ name, number }) => {\n  //   const cont = {\n  //     id: shortid.generate(),\n  //     name,\n  //     number,\n  //   };\n\n  //   const checkName = cont.name.toLowerCase();\n  //   if (contacts.some(item => item.name.toLowerCase() === `${checkName}`)) {\n  //     alert(`${cont.name} is already in contacts`);\n  //     return;\n  //   }\n  //   setContacts([...contacts, cont]);\n  // };\n\n  // const changeFilter = e => {\n  //   setFilter(e.currentTarget.value);\n  // };\n\n  // const onDeleteCont = id => {\n  //   setContacts(() => contacts.filter(con => con.id !== id));\n  // };\n  // filter создаёт НОВЫЙ массив, в который войдут только те элементы arr, для которых вызов callback(item, i, arr) возвратит true.\n\n  // const visibleContact = () => {\n  //   const normalizedFilter = filter.toLowerCase();\n  //   const visibleContact = contacts.filter(con =>\n  //     con.name.toLowerCase().includes(normalizedFilter),\n  //   );\n  //   return visibleContact;\n  // };\n\n  return (\n    <div className=\"container\">\n      <h1>Phonebook</h1>\n      {/* <ContactForm formSubmitHandler={formSubmitHandler} /> */}\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      {/* <Filter value={filter} onChange={changeFilter} /> */}\n      <Filter />\n      {/* <ContactList visibleContact={visibleContact()} onDeleteCont={onDeleteCont} /> */}\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n\n// const mapStateToProps = state => {\n//   return {\n//     value: state.contacts.items,\n//   }\n// }\n// export default connect(mapStateToProps)(App);\n\n// class App extends Component {\n//   state = {\n//     contacts: initialContact,\n//     filter: '',\n//   };\n\n//   componentDidMount() {\n//     const contacts = localStorage.getItem('contacts');\n//     const parsetContacts = JSON.parse(contacts);\n\n//     if (parsetContacts) {\n//       this.setState({\n//         contacts: [...parsetContacts],\n//       });\n//     }\n//   }\n\n//   componentDidUpdate(prevState) {\n//     // console.log('prevState.contacts', prevState.contacts);\n//     // console.log('this.state.contacts', this.state.contacts);\n//     if (this.state.contacts !== prevState.contacts) {\n//       localStorage.setItem('contacts', JSON.stringify(this.state.contacts));\n//     }\n//   }\n\n//   formSubmitHandler = ({ name, number }) => {\n//     const cont = {\n//       id: shortid.generate(),\n//       name,\n//       number,\n//     };\n\n//     const checkName = cont.name.toLowerCase();\n//     if (this.state.contacts.some(item => item.name.toLowerCase() === `${checkName}`)) {\n//       alert(`${cont.name} is already in contacts`);\n//       return;\n//     }\n//     this.setState(prevState => {\n//       const contacts = [...prevState.contacts, cont];\n//       return {\n//         contacts,\n//       };\n//     });\n//     // console.log('Arr', this.state.contacts);\n//   };\n\n//   changeFilter = e => {\n//     // console.log(e.currentTarget.value);\n//     this.setState({\n//       filter: e.currentTarget.value,\n//     });\n//   };\n\n//   onDeleteCont = id => {\n//     // console.log(id);\n//     this.setState(prevState => ({\n//       contacts: prevState.contacts.filter(con => con.id !== id),\n//     }));\n//   };\n//   // filter создаёт НОВЫЙ массив, в который войдут только те элементы arr, для которых вызов callback(item, i, arr) возвратит true.\n\n//   visibleContact = () => {\n//     const normalizedFilter = this.state.filter.toLowerCase();\n//     const visibleContact = this.state.contacts.filter(con =>\n//       con.name.toLowerCase().includes(normalizedFilter),\n//     );\n//     return visibleContact;\n//   };\n\n//   render() {\n//     // const normalizedFilter = this.state.filter.toLowerCase();\n//     // const visibleContact = this.state.contacts.filter(con =>\n//     //   con.name.toLowerCase().includes(normalizedFilter),\n//     // );\n//     return (\n//       <div className=\"container\">\n//         <h1>Phonebook</h1>\n\n//         <ContactForm formSubmitHandler={this.formSubmitHandler} />\n\n//         <h2>Contacts</h2>\n//         <Filter value={this.state.filter} onChange={this.changeFilter} />\n\n//         <ContactList visibleContact={this.visibleContact()} onDeleteCont={this.onDeleteCont} />\n//       </div>\n//     );\n//   }\n// }\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store.js';\n\nimport './index.css';\nimport App from './components/App/App.js';\nconsole.log(store);\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      {/* //Persis */}\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// если персистер - то Апп обернуть в персистГейт\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__3DP4l\",\"item\":\"ContactList_item__26220\",\"btnForm\":\"ContactList_btnForm__gvvb8\"};"],"sourceRoot":""}